services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-open-blog}_database
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-open_blog}
      POSTGRES_USER: ${POSTGRES_USER:-blog_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-blog_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      # Only expose database port if EXPOSE_DATABASE is set to true
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-blog_user} -d ${POSTGRES_DB:-open_blog}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-open-blog}_backend
    environment:
      # Database configuration using service name for dynamic networking
      DATABASE_URL: postgresql://${POSTGRES_USER:-blog_user}:${POSTGRES_PASSWORD:-blog_password}@database:5432/${POSTGRES_DB:-open_blog}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_this_in_production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # Application settings
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      
      # CORS settings
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
      
      # File upload settings
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-5242880}
      UPLOAD_PATH: ${UPLOAD_PATH:-./static}
      
    volumes:
      - static_files:/app/static
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Web Server
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-open-blog}_frontend
    environment:
      BACKEND_URL: http://backend:3000
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  app-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-open-blog}_network

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME:-open-blog}_postgres_data
  static_files:
    name: ${COMPOSE_PROJECT_NAME:-open-blog}_static_files