openapi: 3.0.3
info:
  title: Open Blog API
  description: |
    A comprehensive REST API for a blog platform built with NestJS and Prisma.

    ## Features
    - User authentication with JWT tokens
    - Blog post management (CRUD operations)
    - Categories and tags support
    - Initial setup workflow
    - Admin dashboard capabilities

    ## Authentication
    Most admin endpoints require JWT authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
  version: 1.0.0
  contact:
    name: Open Blog API Support
    email: support@openblog.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://your-production-domain.com/api
    description: Production server

paths:
  /:
    get:
      summary: Health check endpoint
      description: Simple endpoint to check if the API is running
      tags:
        - Health
      responses:
        '200':
          description: API is running successfully
          content:
            text/plain:
              schema:
                type: string
                example: 'Hello World!'

  /auth/login:
    post:
      summary: User login
      description: Authenticate a user and receive a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
            example:
              username: 'admin'
              password: 'password123'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      summary: Get current user profile
      description: Get the current authenticated user's profile information
      tags:
        - User Profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Profile retrieved successfully'
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update current user profile
      description: Update the current authenticated user's profile
      tags:
        - User Profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Profile updated successfully'
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error or conflict (email/username already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile/change-password:
    patch:
      summary: Change own password
      description: Change the current user's password (all authenticated users)
      tags:
        - User Profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
            example:
              currentPassword: 'oldpassword123'
              newPassword: 'newpassword123'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Password changed successfully'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Password changed successfully'
        '400':
          description: Bad request (invalid current password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /setup/blog-status:
    get:
      summary: Get blog setup status
      description: Check the current blog setup status including authentication state
      tags:
        - Setup
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: false
          description: Optional JWT token for authentication
          schema:
            type: string
            format: Bearer {token}
      responses:
        '200':
          description: Blog status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  setupRequired:
                    type: boolean
                    description: Whether initial setup is required
                    example: false
                  hasAdminUser:
                    type: boolean
                    description: Whether an admin user exists
                    example: true
                  currentUser:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - nullable: true
                    description: Current authenticated user (if authenticated)
                  authError:
                    type: boolean
                    description: Whether there was an authentication error
                    example: false

  /posts/published:
    get:
      summary: Get published posts with pagination
      description: Retrieve published blog posts with pagination, filtering, and sorting support (public endpoint)
      tags:
        - Posts (Public)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Number of posts per page (max 50)
          example: 20
        - in: query
          name: search
          schema:
            type: string
          description: Search term for post title, content, or excerpt
          example: 'javascript'
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category slug
          example: 'technology'
        - in: query
          name: tag
          schema:
            type: string
          description: Filter by single tag slug (for backward compatibility)
          example: 'javascript'
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: Filter by multiple tag slugs (comma-separated or array). Posts matching ANY of the tags will be returned.
          example: ['javascript', 'react', 'nodejs']
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, publishedAt, title]
            default: createdAt
          description: Field to sort by
          example: 'publishedAt'
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
          example: 'desc'
      responses:
        '200':
          description: Paginated list of published posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostsResponse'

  /posts/metadata:
    get:
      summary: Get blog metadata
      description: Retrieve categories with post counts and available tags for the blog (public endpoint)
      tags:
        - Posts (Public)
      responses:
        '200':
          description: Blog metadata including categories and tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogMetadataResponse'

  /posts/slug/{slug}:
    get:
      summary: Get post by slug
      description: Retrieve a specific post by its slug (public endpoint)
      tags:
        - Posts (Public)
      parameters:
        - name: slug
          in: path
          required: true
          description: The post slug
          schema:
            type: string
            example: 'my-first-blog-post'
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/posts:
    get:
      summary: Get posts based on user role
      description: |
        Retrieve posts based on user role:
        - Admin users: Can see all posts including drafts
        - Author users: Can only see their own posts including drafts
      tags:
        - Posts (Admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of posts (filtered by user role)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new post
      description: Create a new blog post (admin only)
      tags:
        - Posts (Admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostDto'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/posts/{id}:
    get:
      summary: Get post by ID
      description: |
        Retrieve a specific post by its ID. Role-based access:
        - Admin users: Can access any post
        - Author users: Can only access their own posts
      tags:
        - Posts (Admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The post ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update a post
      description: Update an existing blog post (admin only)
      tags:
        - Posts (Admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The post ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostDto'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a post
      description: Delete a blog post (admin only)
      tags:
        - Posts (Admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The post ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Post deleted successfully'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories:
    get:
      summary: Get all categories
      description: Retrieve all available categories (public endpoint)
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create a new category
      description: Create a new category (admin only)
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories/{id}:
    get:
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: The category ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update a category
      description: Update an existing category (admin only)
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The category ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a category
      description: Delete a category (admin only)
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The category ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Category deleted successfully'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tags:
    get:
      summary: Get all tags
      description: Retrieve all available tags
      tags:
        - Tags
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new tag
      description: Create a new tag (Admin only)
      tags:
        - Tags
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagDto'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Tag name or slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tags/{id}:
    get:
      summary: Get tag by ID
      description: Retrieve a specific tag by its ID
      tags:
        - Tags
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tag ID
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update tag
      description: Update an existing tag (Admin only)
      tags:
        - Tags
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tag ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagDto'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Tag name or slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete tag
      description: Delete an existing tag (Admin only)
      tags:
        - Tags
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tag ID
      responses:
        '204':
          description: Tag deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Cannot delete tag - it is being used by posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tags/slug/{slug}:
    get:
      summary: Get tag by slug
      description: Retrieve a specific tag by its slug
      tags:
        - Tags
      security:
        - BearerAuth: []
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: Tag slug
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /setup/required:
    get:
      summary: Check if setup is required
      description: Check if the initial blog setup has been completed
      tags:
        - Setup
      responses:
        '200':
          description: Setup status
          content:
            application/json:
              schema:
                type: object
                properties:
                  required:
                    type: boolean
                    description: Whether initial setup is required
                    example: true

  /setup/admin:
    post:
      summary: Create initial admin user
      description: Create the first admin user and set up the blog
      tags:
        - Setup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdminDto'
      responses:
        '201':
          description: Admin user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Admin user created successfully'
                  admin:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or setup already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /setup/blog-settings:
    get:
      summary: Get blog settings
      description: Retrieve the current blog settings
      tags:
        - Setup
      responses:
        '200':
          description: Blog settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogSettings'
    put:
      summary: Update blog settings
      description: Update the blog settings (admin only)
      tags:
        - Setup
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogSettingsDto'
      responses:
        '200':
          description: Blog settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Blog settings updated successfully'
                  settings:
                    $ref: '#/components/schemas/BlogSettings'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /insights:
    get:
      summary: Get blog insights
      description: Retrieve blog statistics and insights for dashboard (admin only)
      tags:
        - Insights
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Blog insights and statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogInsights'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users with filtering and sorting options (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for email, username, firstName, or lastName
        - in: query
          name: role
          schema:
            type: string
            enum: [ADMIN, AUTHOR]
          description: Filter by user role
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, email, username, firstName, lastName]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new user
      description: Create a new user account (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/stats/overview:
    get:
      summary: Get user statistics
      description: Retrieve user statistics and overview data (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update user
      description: Update a user's information (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - validation error or self-modification attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Delete a user account (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - Cannot delete own account or user has associated content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/toggle-status:
    patch:
      summary: Toggle user active status
      description: Activate or deactivate a user account (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - Cannot change own account status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/reset-password:
    patch:
      summary: Reset user password
      description: Reset a user's password and generate a temporary password (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginDto:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username or email
          example: 'admin'
        password:
          type: string
          description: User password
          example: 'password123'

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        user:
          $ref: '#/components/schemas/User'

    PaginatedPostsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
              example: 1
            limit:
              type: integer
              description: Number of items per page
              example: 20
            total:
              type: integer
              description: Total number of items
              example: 150
            totalPages:
              type: integer
              description: Total number of pages
              example: 8
            hasNext:
              type: boolean
              description: Whether there is a next page
              example: true
            hasPrevious:
              type: boolean
              description: Whether there is a previous page
              example: false

    BlogMetadataResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Category ID
                example: '123e4567-e89b-12d3-a456-426614174000'
              name:
                type: string
                description: Category name
                example: 'Technology'
              slug:
                type: string
                description: Category slug
                example: 'technology'
              description:
                type: string
                nullable: true
                description: Category description
                example: 'Posts about technology and programming'
              color:
                type: string
                nullable: true
                description: Category color (hex code)
                example: '#3B82F6'
              postCount:
                type: integer
                description: Number of published posts in this category
                example: 15
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Tag ID
                example: '123e4567-e89b-12d3-a456-426614174001'
              name:
                type: string
                description: Tag name
                example: 'JavaScript'
              slug:
                type: string
                description: Tag slug
                example: 'javascript'
              postCount:
                type: integer
                description: Number of published posts with this tag
                example: 8
        totalPosts:
          type: integer
          description: Total number of published posts
          example: 42

    ChangePasswordDto:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current user password
          example: 'oldpassword123'
        newPassword:
          type: string
          description: New password
          example: 'newpassword123'

    CreatePostDto:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: Post title
          example: 'My First Blog Post'
        content:
          type: string
          description: Post content (HTML/Markdown)
          example: '<p>This is the content of my first blog post.</p>'
        excerpt:
          type: string
          description: Short excerpt of the post
          example: 'A brief summary of the post'
        featuredImage:
          type: string
          description: URL to the featured image
          example: 'https://example.com/image.jpg'
        published:
          type: boolean
          description: Whether the post is published
          default: false
          example: true
        publishedAt:
          type: string
          format: date-time
          description: When the post was published
          example: '2025-07-30T15:30:00Z'
        metaTitle:
          type: string
          description: SEO meta title
          example: 'My First Blog Post - Open Blog'
        metaDescription:
          type: string
          description: SEO meta description
          example: 'Learn about creating your first blog post'
        categoryId:
          type: string
          format: uuid
          description: Category ID
          example: '123e4567-e89b-12d3-a456-426614174000'
        tagIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of tag IDs
          example:
            [
              '123e4567-e89b-12d3-a456-426614174001',
              '123e4567-e89b-12d3-a456-426614174002',
            ]

    UpdatePostDto:
      type: object
      properties:
        title:
          type: string
          description: Post title
          example: 'Updated Blog Post Title'
        content:
          type: string
          description: Post content (HTML/Markdown)
          example: '<p>Updated content of the blog post.</p>'
        excerpt:
          type: string
          description: Short excerpt of the post
          example: 'Updated brief summary'
        featuredImage:
          type: string
          description: URL to the featured image
          example: 'https://example.com/updated-image.jpg'
        published:
          type: boolean
          description: Whether the post is published
          example: true
        publishedAt:
          type: string
          format: date-time
          description: When the post was published
          example: '2025-07-30T16:00:00Z'
        metaTitle:
          type: string
          description: SEO meta title
          example: 'Updated Blog Post - Open Blog'
        metaDescription:
          type: string
          description: SEO meta description
          example: 'Updated description for SEO'
        categoryId:
          type: string
          format: uuid
          description: Category ID
          example: '123e4567-e89b-12d3-a456-426614174000'
        tagIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of tag IDs
          example: ['123e4567-e89b-12d3-a456-426614174001']

    CreateAdminDto:
      type: object
      required:
        - email
        - username
        - password
        - blogTitle
      properties:
        email:
          type: string
          format: email
          description: Admin email address
          example: 'admin@example.com'
        username:
          type: string
          description: Admin username
          example: 'admin'
        password:
          type: string
          minLength: 8
          description: Admin password (minimum 8 characters)
          example: 'securepassword123'
        firstName:
          type: string
          description: Admin first name
          example: 'John'
        lastName:
          type: string
          description: Admin last name
          example: 'Doe'
        blogTitle:
          type: string
          description: The title of the blog
          example: 'My Awesome Blog'
        blogDescription:
          type: string
          description: Description of the blog
          example: 'A blog about technology and life'

    CreateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Category name
          example: 'Technology'
        description:
          type: string
          maxLength: 500
          description: Category description
          example: 'Posts about technology and programming'
        color:
          type: string
          maxLength: 7
          description: Category color (hex code)
          example: '#3B82F6'

    UpdateCategoryDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Category name
          example: 'Updated Technology'
        description:
          type: string
          maxLength: 500
          description: Category description
          example: 'Updated posts about technology and programming'
        color:
          type: string
          maxLength: 7
          description: Category color (hex code)
          example: '#10B981'

    BlogPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique post identifier
          example: '123e4567-e89b-12d3-a456-426614174000'
        title:
          type: string
          description: Post title
          example: 'My First Blog Post'
        slug:
          type: string
          description: URL-friendly post slug
          example: 'my-first-blog-post'
        content:
          type: string
          description: Post content
          example: '<p>This is the content of my blog post.</p>'
        excerpt:
          type: string
          nullable: true
          description: Short excerpt
          example: 'A brief summary'
        featuredImage:
          type: string
          nullable: true
          description: Featured image URL
          example: 'https://example.com/image.jpg'
        published:
          type: boolean
          description: Publication status
          example: true
        publishedAt:
          type: string
          format: date-time
          nullable: true
          description: Publication date
          example: '2025-07-30T15:30:00Z'
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2025-07-30T15:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: '2025-07-30T15:30:00Z'
        metaTitle:
          type: string
          nullable: true
          description: SEO meta title
          example: 'My First Blog Post - Open Blog'
        metaDescription:
          type: string
          nullable: true
          description: SEO meta description
          example: 'Learn about creating your first blog post'
        authorId:
          type: string
          format: uuid
          description: Author user ID
          example: '123e4567-e89b-12d3-a456-426614174001'
        categoryId:
          type: string
          format: uuid
          nullable: true
          description: Category ID
          example: '123e4567-e89b-12d3-a456-426614174002'
        author:
          $ref: '#/components/schemas/User'
        category:
          allOf:
            - $ref: '#/components/schemas/Category'
            - nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: '123e4567-e89b-12d3-a456-426614174001'
        email:
          type: string
          format: email
          description: User email
          example: 'admin@example.com'
        username:
          type: string
          description: Username
          example: 'admin'
        firstName:
          type: string
          nullable: true
          description: First name
          example: 'John'
        lastName:
          type: string
          nullable: true
          description: Last name
          example: 'Doe'
        role:
          type: string
          enum: [ADMIN, AUTHOR]
          description: User role
          example: 'ADMIN'
        isActive:
          type: boolean
          description: Whether user is active
          example: true
        isTemporaryPassword:
          type: boolean
          description: Whether user has a temporary password that must be changed
          example: false
        mustChangePassword:
          type: boolean
          description: Whether user must change password on next login
          example: false
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp
          example: '2025-08-05T15:30:00Z'
        passwordResetAt:
          type: string
          format: date-time
          nullable: true
          description: Last password reset timestamp
          example: '2025-08-05T14:00:00Z'
        passwordChangedAt:
          type: string
          format: date-time
          nullable: true
          description: Last password change timestamp
          example: '2025-08-05T14:05:00Z'
        createdAt:
          type: string
          format: date-time
          description: Account creation date
          example: '2025-07-30T15:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: '2025-07-30T15:00:00Z'

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique category identifier
          example: '123e4567-e89b-12d3-a456-426614174002'
        name:
          type: string
          description: Category name
          example: 'Technology'
        slug:
          type: string
          description: URL-friendly category slug
          example: 'technology'
        description:
          type: string
          nullable: true
          description: Category description
          example: 'Posts about technology and programming'
        color:
          type: string
          nullable: true
          description: Category color (hex code)
          example: '#3B82F6'
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2025-07-30T15:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: '2025-07-30T15:00:00Z'

    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique tag identifier
          example: '123e4567-e89b-12d3-a456-426614174003'
        name:
          type: string
          description: Tag name
          example: 'JavaScript'
        slug:
          type: string
          description: URL-friendly tag slug
          example: 'javascript'
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2025-07-30T15:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: '2025-07-30T15:00:00Z'

    CreateTagDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Tag name (slug will be auto-generated)
          minLength: 1
          maxLength: 50
          example: 'JavaScript'

    UpdateTagDto:
      type: object
      properties:
        name:
          type: string
          description: Updated tag name
          minLength: 1
          maxLength: 50
          example: 'JavaScript Framework'

    BlogSettings:
      type: object
      properties:
        id:
          type: string
          description: Blog settings ID
          example: 'default'
        blogTitle:
          type: string
          description: The title of the blog
          example: 'My Awesome Blog'
        blogDescription:
          type: string
          nullable: true
          description: Description of the blog
          example: 'A blog about technology and life'
        logoUrl:
          type: string
          nullable: true
          description: URL to the blog logo
          example: 'https://example.com/logo.png'
        faviconUrl:
          type: string
          nullable: true
          description: URL to the blog favicon
          example: 'https://example.com/favicon.ico'
        theme:
          type: string
          description: Blog theme
          example: 'default'
        emailSettings:
          type: object
          nullable: true
          description: Email configuration settings
        socialLinks:
          type: object
          nullable: true
          description: Social media links
        seoSettings:
          type: object
          nullable: true
          description: SEO configuration settings
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    BlogSettingsDto:
      type: object
      required:
        - blogTitle
      properties:
        blogTitle:
          type: string
          description: The title of the blog
          maxLength: 100
          example: 'My Awesome Blog'
        blogDescription:
          type: string
          nullable: true
          description: Description of the blog
          maxLength: 500
          example: 'A blog about technology and life'
        logoUrl:
          type: string
          nullable: true
          description: URL to the blog logo
          format: uri
          example: 'https://example.com/logo.png'
        faviconUrl:
          type: string
          nullable: true
          description: URL to the blog favicon
          format: uri
          example: 'https://example.com/favicon.ico'
        theme:
          type: string
          nullable: true
          description: Blog theme
          example: 'default'
        emailSettings:
          type: object
          nullable: true
          description: Email configuration settings
        socialLinks:
          type: object
          nullable: true
          description: Social media links
        seoSettings:
          type: object
          nullable: true
          description: SEO configuration settings

    BlogInsights:
      type: object
      properties:
        totalPosts:
          type: integer
          description: Total number of posts
          example: 15
        publishedPosts:
          type: integer
          description: Number of published posts
          example: 12
        draftPosts:
          type: integer
          description: Number of draft posts
          example: 3
        totalCategories:
          type: integer
          description: Total number of categories
          example: 5
        totalTags:
          type: integer
          description: Total number of tags
          example: 8
        totalUsers:
          type: integer
          description: Total number of active users
          example: 3
        recentPosts:
          type: integer
          description: Number of posts created in the last 7 days
          example: 2

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 400
        message:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Error message(s)
          example: 'Invalid input data'
        error:
          type: string
          description: Error type
          example: 'Bad Request'

    # User Management Schemas
    CreateUserDto:
      type: object
      required:
        - email
        - username
        - password
        - role
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: 'john.doe@example.com'
        username:
          type: string
          minLength: 3
          description: Unique username
          example: 'johndoe'
        password:
          type: string
          minLength: 8
          description: User password
          example: 'SecureP@ssw0rd'
        firstName:
          type: string
          description: User first name
          example: 'John'
        lastName:
          type: string
          description: User last name
          example: 'Doe'
        role:
          type: string
          enum: [ADMIN, AUTHOR]
          description: User role
          example: 'AUTHOR'
        isActive:
          type: boolean
          description: Whether the user account is active
          default: true
          example: true

    UpdateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: 'john.doe@example.com'
        username:
          type: string
          minLength: 3
          description: Unique username
          example: 'johndoe'
        password:
          type: string
          minLength: 8
          description: New password
          example: 'NewSecureP@ssw0rd'
        firstName:
          type: string
          description: User first name
          example: 'John'
        lastName:
          type: string
          description: User last name
          example: 'Doe'
        role:
          type: string
          enum: [ADMIN, AUTHOR]
          description: User role
          example: 'AUTHOR'
        isActive:
          type: boolean
          description: Whether the user account is active
          example: true

    UpdateProfileDto:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          description: User first name
          example: 'John'
        lastName:
          type: string
          maxLength: 50
          description: User last name
          example: 'Doe'
        email:
          type: string
          format: email
          description: User email address
          example: 'john.doe@example.com'
        username:
          type: string
          maxLength: 50
          description: Unique username
          example: 'johndoe'
        profilePicture:
          type: string
          format: uri
          nullable: true
          description: URL to user's profile picture
          example: 'https://example.com/avatar.jpg'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: 'cldj8w5k40000r6o8k5p1q2z7'
        email:
          type: string
          format: email
          description: User email address
          example: 'john.doe@example.com'
        username:
          type: string
          description: Unique username
          example: 'johndoe'
        firstName:
          type: string
          nullable: true
          description: User first name
          example: 'John'
        lastName:
          type: string
          nullable: true
          description: User last name
          example: 'Doe'
        profilePicture:
          type: string
          nullable: true
          description: URL to user's profile picture
          example: 'https://example.com/avatar.jpg'
        role:
          type: string
          enum: [ADMIN, AUTHOR]
          description: User role
          example: 'AUTHOR'
        isActive:
          type: boolean
          description: Whether the user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    UserResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: 'User retrieved successfully'
        data:
          $ref: '#/components/schemas/User'

    UsersListResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: 'Users retrieved successfully'
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            total:
              type: integer
              description: Total number of users
              example: 10
            meta:
              type: object
              properties:
                search:
                  type: string
                  description: Search term used
                  example: 'john'
                role:
                  type: string
                  enum: [ADMIN, AUTHOR]
                  description: Role filter used
                  example: 'AUTHOR'
                isActive:
                  type: boolean
                  description: Active status filter used
                  example: true
                sortBy:
                  type: string
                  description: Field used for sorting
                  example: 'createdAt'
                sortOrder:
                  type: string
                  enum: [asc, desc]
                  description: Sort order used
                  example: 'desc'

    UserStatsResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: 'User statistics retrieved successfully'
        data:
          type: object
          properties:
            total:
              type: integer
              description: Total number of users
              example: 50
            active:
              type: integer
              description: Number of active users
              example: 45
            inactive:
              type: integer
              description: Number of inactive users
              example: 5
            admins:
              type: integer
              description: Number of admin users
              example: 3
            authors:
              type: integer
              description: Number of author users
              example: 47
            recent:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: Recently created users
              maxItems: 5

    PasswordResetResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: 'Password reset successfully'
        data:
          type: object
          properties:
            message:
              type: string
              description: Reset confirmation message
              example: 'Password reset successfully'
            temporaryPassword:
              type: string
              description: Temporary password generated
              example: 'temp123abc456'
            note:
              type: string
              description: Important note about temporary password
              example: 'Please provide this temporary password to the user and ask them to change it immediately.'

    PasswordChangeResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: 'Password changed successfully'
        data:
          type: object
          properties:
            message:
              type: string
              description: Confirmation message
              example: 'Password changed successfully'

    SuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Success message
          example: 'Operation completed successfully'

tags:
  - name: Health
    description: API health check endpoints
  - name: Authentication
    description: User authentication endpoints
  - name: Posts (Public)
    description: Public blog post endpoints
  - name: Posts (Admin)
    description: Admin blog post management endpoints
  - name: Categories
    description: Category management endpoints
  - name: Tags
    description: Tag management endpoints
  - name: Setup
    description: Initial blog setup endpoints
  - name: Users
    description: User management endpoints (admin only)
  - name: User Profile
    description: Current user profile management endpoints
  - name: Insights
    description: Blog statistics and insights endpoints
